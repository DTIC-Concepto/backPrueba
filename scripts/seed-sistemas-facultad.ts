/**
 * Script de seed: Crear Facultad de Sistemas con carreras, coordinadores, profesores, RA y OPP
 * 
 * Este script:
 * 1. Crea la facultad "Sistemas"
 * 2. Crea 4 carreras: Software, Computaci√≥n, Ciencia de datos, IA
 * 3. Asigna coordinadores y profesores a cada carrera
 * 4. Para Software: crea RAs (Generales y Espec√≠ficos) y OPPs
 * 5. Mantiene los IDs creados para relaciones correctas
 * 
 * Ejecutar con: npx ts-node scripts/seed-sistemas-facultad.ts
 */

import { Sequelize } from 'sequelize';
import * as dotenv from 'dotenv';
import * as bcrypt from 'bcrypt';

dotenv.config();

// Interfaces para almacenar IDs creados
interface FacultadData {
  id: number;
  nombre: string;
}

interface CarreraData {
  id: number;
  codigo: string;
  nombre: string;
  coordinadorId: number;
}

interface UsuarioData {
  id: number;
  nombres: string;
  apellidos: string;
  correo: string;
}

async function hashPassword(password: string): Promise<string> {
  const salt = await bcrypt.genSalt(12);
  return bcrypt.hash(password, salt);
}

async function seedSistemasFacultad() {
  const sequelize = new Sequelize(
    process.env.DB_NAME || 'poliacredita_db',
    process.env.DB_USER || 'postgres',
    process.env.DB_PASS || 'postgres',
    {
      dialect: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432', 10),
      logging: false, // Desactivar logs para mayor claridad
    }
  );

  try {
    console.log('üöÄ Iniciando seed de Facultad de Sistemas...\n');

    // ==================== 1. CREAR FACULTAD ====================
    console.log('üìö Creando Facultad de Sistemas...');
    const [facultadResult]: any = await sequelize.query(`
      INSERT INTO facultades (nombre, codigo, descripcion, "estadoActivo", "createdAt", "updatedAt")
      VALUES (
        'Sistemas',
        'FISIS',
        'Facultad de Ingenier√≠a en Sistemas Inform√°ticos',
        true,
        NOW(),
        NOW()
      )
      RETURNING id, nombre
    `);
    const facultad: FacultadData = facultadResult[0];
    console.log(`‚úÖ Facultad creada: ${facultad.nombre} (ID: ${facultad.id})\n`);

    // ==================== 2. CREAR COORDINADORES ====================
    console.log('üë• Creando coordinadores para las carreras...');
    
    const coordinadores = [
      { nombres: 'Mar√≠a Elena', apellidos: 'Rodr√≠guez Castro', correo: 'maria.rodriguez.sistemas@epn.edu.ec', cedula: '0420567890' },
      { nombres: 'Carlos Alberto', apellidos: 'Mendoza Flores', correo: 'carlos.mendoza.sistemas@epn.edu.ec', cedula: '0421678901' },
      { nombres: 'Ana Patricia', apellidos: 'Vargas Luna', correo: 'ana.vargas.sistemas@epn.edu.ec', cedula: '0422789012' },
      { nombres: 'Roberto Xavier', apellidos: 'S√°nchez Torres', correo: 'roberto.sanchez.sistemas@epn.edu.ec', cedula: '0423890123' },
    ];

    const coordinadoresCreados: UsuarioData[] = [];
    const passwordHash = await hashPassword('Coordinador2024!');

    for (const coord of coordinadores) {
      const [userResult]: any = await sequelize.query(`
        INSERT INTO usuarios (nombres, apellidos, cedula, correo, contrasena, rol, "facultadId", "estadoActivo", "createdAt", "updatedAt")
        VALUES (
          '${coord.nombres}',
          '${coord.apellidos}',
          '${coord.cedula}',
          '${coord.correo}',
          '${passwordHash}',
          'COORDINADOR',
          ${facultad.id},
          true,
          NOW(),
          NOW()
        )
        RETURNING id, nombres, apellidos, correo
      `);
      coordinadoresCreados.push(userResult[0]);
      
      // Crear rol en usuario_roles
      await sequelize.query(`
        INSERT INTO usuario_roles (usuario_id, rol, activo, created_at, updated_at)
        VALUES (${userResult[0].id}, 'COORDINADOR', true, NOW(), NOW())
      `);
      
      console.log(`  ‚úÖ Coordinador: ${userResult[0].nombres} ${userResult[0].apellidos} (ID: ${userResult[0].id})`);
    }

    console.log('\n');

    // ==================== 3. CREAR CARRERAS ====================
    console.log('üéì Creando carreras...');
    
    const carrerasData = [
      { codigo: 'ISW', nombre: 'Software', duracion: 10, modalidad: 'PRESENCIAL' },
      { codigo: 'ICC', nombre: 'Computaci√≥n', duracion: 10, modalidad: 'PRESENCIAL' },
      { codigo: 'ICD', nombre: 'Ciencia de datos', duracion: 10, modalidad: 'PRESENCIAL' },
      { codigo: 'IIA', nombre: 'Inteligencia Artificial', duracion: 10, modalidad: 'PRESENCIAL' },
    ];

    const carrerasCreadas: CarreraData[] = [];

    for (let i = 0; i < carrerasData.length; i++) {
      const carrera = carrerasData[i];
      const coordinador = coordinadoresCreados[i];
      
      const [carreraResult]: any = await sequelize.query(`
        INSERT INTO carreras (codigo, nombre, "facultadId", "coordinadorId", duracion, modalidad, "estadoActivo", "createdAt", "updatedAt")
        VALUES (
          '${carrera.codigo}',
          '${carrera.nombre}',
          ${facultad.id},
          ${coordinador.id},
          ${carrera.duracion},
          '${carrera.modalidad}',
          true,
          NOW(),
          NOW()
        )
        RETURNING id, codigo, nombre, "coordinadorId"
      `);
      
      carrerasCreadas.push(carreraResult[0]);
      
      // Crear relaci√≥n en usuario_carreras (coordinador)
      await sequelize.query(`
        INSERT INTO usuario_carreras (usuario_id, carrera_id, es_coordinador, estado_activo, created_at, updated_at)
        VALUES (${coordinador.id}, ${carreraResult[0].id}, true, true, NOW(), NOW())
      `);
      
      console.log(`  ‚úÖ Carrera: ${carreraResult[0].nombre} (ID: ${carreraResult[0].id}) - Coordinador: ${coordinador.nombres} ${coordinador.apellidos}`);
    }

    console.log('\n');

    // ==================== 4. CREAR PROFESORES ====================
    console.log('üë®‚Äçüè´ Creando profesores...');
    
    const profesoresData = [
      // Profesores para Software (incluyendo uno principal para login)
      { nombres: 'Juan Carlos', apellidos: 'P√©rez Gonz√°lez', correo: 'juan.perez.software@epn.edu.ec', cedula: '0408901234', carreras: ['Software'] },
      { nombres: 'Laura Fernanda', apellidos: 'Morales Ruiz', correo: 'laura.morales.software@epn.edu.ec', cedula: '0409012345', carreras: ['Software', 'Computaci√≥n'] },
      { nombres: 'Diego Andr√©s', apellidos: 'Ram√≠rez Silva', correo: 'diego.ramirez.software@epn.edu.ec', cedula: '0410123456', carreras: ['Software'] },
      
      // Profesores para Computaci√≥n
      { nombres: 'Sof√≠a Valentina', apellidos: 'Castro Herrera', correo: 'sofia.castro.comp@epn.edu.ec', cedula: '0411234567', carreras: ['Computaci√≥n'] },
      { nombres: 'Miguel √Ångel', apellidos: 'Ortiz Paredes', correo: 'miguel.ortiz.comp@epn.edu.ec', cedula: '0412345678', carreras: ['Computaci√≥n', 'Ciencia de datos'] },
      
      // Profesores para Ciencia de datos
      { nombres: 'Gabriela Andrea', apellidos: 'L√≥pez V√°squez', correo: 'gabriela.lopez.datos@epn.edu.ec', cedula: '0413456789', carreras: ['Ciencia de datos'] },
      { nombres: 'Fernando Jos√©', apellidos: 'Guti√©rrez Mora', correo: 'fernando.gutierrez.datos@epn.edu.ec', cedula: '0414567890', carreras: ['Ciencia de datos', 'Inteligencia Artificial'] },
      
      // Profesores para Inteligencia Artificial
      { nombres: 'Carolina Isabel', apellidos: 'Navarro Ch√°vez', correo: 'carolina.navarro.ia@epn.edu.ec', cedula: '0415678901', carreras: ['Inteligencia Artificial'] },
      { nombres: 'Andr√©s Felipe', apellidos: 'Rojas Medina', correo: 'andres.rojas.ia@epn.edu.ec', cedula: '0416789012', carreras: ['Inteligencia Artificial', 'Software'] },
    ];

    const passwordProfesor = await hashPassword('Profesor2024!');
    const profesoresCreados: (UsuarioData & { carrerasAsignadas: string[] })[] = [];

    for (const prof of profesoresData) {
      const [profResult]: any = await sequelize.query(`
        INSERT INTO usuarios (nombres, apellidos, cedula, correo, contrasena, rol, "facultadId", "estadoActivo", "createdAt", "updatedAt")
        VALUES (
          '${prof.nombres}',
          '${prof.apellidos}',
          '${prof.cedula}',
          '${prof.correo}',
          '${passwordProfesor}',
          'PROFESOR',
          ${facultad.id},
          true,
          NOW(),
          NOW()
        )
        RETURNING id, nombres, apellidos, correo
      `);
      
      // Crear rol en usuario_roles
      await sequelize.query(`
        INSERT INTO usuario_roles (usuario_id, rol, activo, created_at, updated_at)
        VALUES (${profResult[0].id}, 'PROFESOR', true, NOW(), NOW())
      `);
      
      // Asignar a carreras mediante usuario_carreras
      for (const carreraNombre of prof.carreras) {
        const carrera = carrerasCreadas.find(c => c.nombre === carreraNombre);
        if (carrera) {
          await sequelize.query(`
            INSERT INTO usuario_carreras (usuario_id, carrera_id, es_coordinador, estado_activo, created_at, updated_at)
            VALUES (${profResult[0].id}, ${carrera.id}, false, true, NOW(), NOW())
          `);
        }
      }
      
      profesoresCreados.push({ ...profResult[0], carrerasAsignadas: prof.carreras });
      console.log(`  ‚úÖ Profesor: ${profResult[0].nombres} ${profResult[0].apellidos} - Carreras: ${prof.carreras.join(', ')}`);
    }

    console.log('\n');

    // ==================== 5. CREAR RAs PARA SOFTWARE ====================
    const carreraSoftware = carrerasCreadas.find(c => c.nombre === 'Software')!;
    console.log(`üìù Creando Resultados de Aprendizaje para ${carreraSoftware.nombre}...\n`);

    // RAs Generales
    const rasGenerales = [
      'Ser capaz de identificar las necesidades de los sectores estrat√©gicos p√∫blicos o privados del pa√≠s, que requieren una soluci√≥n a trav√©s de productos de software eficientes y costo-efectivos.',
      'Demostrar h√°bitos de trabajo efectivos, el liderazgo, la buena comunicaci√≥n, el respeto al medio ambiente, la √©tica profesional, que le permita trabajar individualmente y como parte de un equipo.',
      'Fomentar el desarrollo profesional continuo y vanguardista acorde a nuevos modelos, t√©cnicas y tecnolog√≠as que van surgiendo en la industria del software.',
    ];

    console.log('üìå Creando RAs Generales...');
    for (let i = 0; i < rasGenerales.length; i++) {
      const [raResult]: any = await sequelize.query(`
        INSERT INTO resultados_aprendizaje (codigo, descripcion, tipo, "carreraId", "estadoActivo", "createdAt", "updatedAt")
        VALUES (
          'RG${i + 1}',
          '${rasGenerales[i].replace(/'/g, "''")}',
          'GENERAL',
          ${carreraSoftware.id},
          true,
          NOW(),
          NOW()
        )
        RETURNING id, codigo
      `);
      console.log(`  ‚úÖ RA General: ${raResult[0].codigo}`);
    }

    // RAs Espec√≠ficos
    const rasEspecificos = [
      'Aplicar teor√≠as, metodolog√≠as, est√°ndares y tecnolog√≠as apropiadas, para crear soluciones de software, mediante el an√°lisis, dise√±o, desarrollo, implementaci√≥n, verificaci√≥n, documentaci√≥n y gesti√≥n.',
      'Evaluar aspectos interdisciplinares, de infraestructuras tecnol√≥gicas existentes, de tecnolog√≠a emergente, legales, √©ticos, econ√≥micos, ambientales y sociales, para dise√±ar soluciones de Software de Calidad.',
      'Emplear principios y herramientas de investigaci√≥n, para generar nuevas formas de aplicaci√≥n de la Ingenier√≠a de Software en los sectores industriales y acad√©micos estrat√©gicos del pa√≠s.',
      'Construir un sistema de aprendizaje aut√≥nomo mediante el aprendizaje activo, motivado, participativo, modelado, necesario, y cr√≠tico de la diversidad de fuentes y tipo de informaci√≥n, considerando que la Ingenier√≠a de Software es parte de un campo que cambia muy r√°pidamente.',
      'Desarrollar la creatividad y emprendimiento a trav√©s de la investigaci√≥n de nuevas formas de aplicaci√≥n de la Ingenier√≠a de Software para satisfacer las necesidades de transformaci√≥n en los sectores estrat√©gicos nacionales.',
      'Emplear los fundamentos de comunicaci√≥n profesional, t√©cnica y cient√≠fica, para transferir efectivamente los conocimientos adquiridos durante el auto aprendizaje, la investigaci√≥n y el ejercicio profesional.',
      'Crear sistemas de Software, aplicando la Ingenier√≠a de Software y los est√°ndares m√°s adecuados, asegurando la calidad del proceso y del producto de software; tomando en cuenta cuestiones legales y sociales, y practicando los h√°bitos de trabajo √©tico y efectivo.',
      'Demostrar capacidad de trabajo individual y en equipo logrando la conciliaci√≥n de objetivos conflictivos en un entorno t√≠pico de desarrollo de Software, compromisos aceptables dentro de las limitaciones de costo, tiempo, conocimiento, sistemas existentes, entre otros.',
      'Utilizar t√©cnicas, herramientas y est√°ndares que permitan auditar el desempe√±o y cumplimiento de soluciones de Software.',
    ];

    console.log('üìå Creando RAs Espec√≠ficos...');
    for (let i = 0; i < rasEspecificos.length; i++) {
      const [raResult]: any = await sequelize.query(`
        INSERT INTO resultados_aprendizaje (codigo, descripcion, tipo, "carreraId", "estadoActivo", "createdAt", "updatedAt")
        VALUES (
          'RE${i + 1}',
          '${rasEspecificos[i].replace(/'/g, "''")}',
          'ESPECIFICO',
          ${carreraSoftware.id},
          true,
          NOW(),
          NOW()
        )
        RETURNING id, codigo
      `);
      console.log(`  ‚úÖ RA Espec√≠fico: ${raResult[0].codigo}`);
    }

    console.log('\n');

    // ==================== 6. CREAR OPPs PARA SOFTWARE ====================
    console.log('üéØ Creando Objetivos del Programa (OPP) para Software...\n');

    const opps = [
      'Verificaci√≥n, validaci√≥n y aseguramiento de la calidad del Software.',
      'Administraci√≥n de proyectos de Software.',
      'Investigaci√≥n aplicada en proyectos de conceptualizaci√≥n, desarrollo, innovaci√≥n y transferencia de Software.',
      'Ingenier√≠a de Software para el desarrollo de Sistemas de Informaci√≥n y Sistemas Inteligentes.',
      'Emprendimiento de empresas de investigaci√≥n, innovaci√≥n, desarrollo y comercializaci√≥n de Software.',
    ];

    for (let i = 0; i < opps.length; i++) {
      const [oppResult]: any = await sequelize.query(`
        INSERT INTO opps (codigo, descripcion, "carreraId", "estadoActivo", "createdAt", "updatedAt")
        VALUES (
          'OPP${i + 1}',
          '${opps[i].replace(/'/g, "''")}',
          ${carreraSoftware.id},
          true,
          NOW(),
          NOW()
        )
        RETURNING id, codigo
      `);
      console.log(`  ‚úÖ OPP: ${oppResult[0].codigo} - ${opps[i].substring(0, 50)}...`);
    }

    console.log('\n');

    // ==================== RESUMEN ====================
    console.log('üìä =============== RESUMEN ===============\n');
    console.log(`‚úÖ Facultad creada: ${facultad.nombre} (ID: ${facultad.id})`);
    console.log(`‚úÖ Carreras creadas: ${carrerasCreadas.length}`);
    carrerasCreadas.forEach(c => {
      console.log(`   - ${c.nombre} (ID: ${c.id}) - C√≥digo: ${c.codigo}`);
    });
    console.log(`‚úÖ Coordinadores creados: ${coordinadoresCreados.length}`);
    console.log(`‚úÖ Profesores creados: ${profesoresCreados.length}`);
    console.log(`‚úÖ RAs creados para Software: ${rasGenerales.length + rasEspecificos.length} (${rasGenerales.length} Generales + ${rasEspecificos.length} Espec√≠ficos)`);
    console.log(`‚úÖ OPPs creados para Software: ${opps.length}\n`);

    console.log('üîë =============== CREDENCIALES ===============\n');
    console.log('üìå COORDINADORES (password: Coordinador2024!):');
    coordinadoresCreados.forEach((coord, i) => {
      console.log(`   ${coord.correo} - ${carrerasCreadas[i].nombre}`);
    });
    
    console.log('\nüìå PROFESORES (password: Profesor2024!):');
    profesoresCreados.forEach(prof => {
      console.log(`   ${prof.correo} - Carreras: ${prof.carrerasAsignadas.join(', ')}`);
    });
    
    console.log('\nüéØ PROFESOR RECOMENDADO PARA LOGIN (Software):');
    const profesorSoftware = profesoresCreados[0]; // Juan Carlos P√©rez
    console.log(`   Email: ${profesorSoftware.correo}`);
    console.log(`   Password: Profesor2024!`);
    console.log(`   Carreras asignadas: ${profesorSoftware.carrerasAsignadas.join(', ')}`);
    console.log(`   Rol: PROFESOR\n`);

    await sequelize.close();
    console.log('‚úÖ Seed completado exitosamente\n');
    
  } catch (error: any) {
    console.error('‚ùå Error durante el seed:', error.message);
    console.error(error);
    throw error;
  }
}

// Ejecutar seed
seedSistemasFacultad()
  .then(() => {
    console.log('üéâ Proceso completado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Error fatal:', error);
    process.exit(1);
  });
