import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication, ValidationPipe } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import request from 'supertest';
import { ResultadosAprendizajeService } from '../src/resultados-aprendizaje/resultados-aprendizaje.service';
import { ResultadosAprendizajeController } from '../src/resultados-aprendizaje/resultados-aprendizaje.controller';
import { TipoRA } from '../src/resultados-aprendizaje/models/resultado-aprendizaje.model';
import { RolEnum } from '../src/common/enums/rol.enum';
import { JwtAuthGuard } from '../src/auth/guards/jwt-auth.guard';
import { RolesGuard } from '../src/auth/guards/roles.guard';
import { AuditoriaService } from '../src/auditoria/auditoria.service';

describe('ResultadosAprendizaje E2E', () => {
  let app: INestApplication;
  let resultadosAprendizajeService: ResultadosAprendizajeService;

  const mockJwtService = {
    sign: jest.fn(),
    verify: jest.fn(),
  };

  const mockAuditoriaService = {
    registrarEvento: jest.fn(),
  };

  const mockResultadosAprendizajeService = {
    create: jest.fn(),
    findAllWithFiltersAndPagination: jest.fn(),
  };

  const mockUser = {
    id: 1,
    cedula: '1234567890',
    nombres: 'Test',
    apellidos: 'Usuario',
    telefono: '0999999999',
    activo: true,
    carreraId: 1,
    roles: [{ nombre: RolEnum.COORDINADOR }],
  };

  const mockRA = {
    id: 1,
    codigo: 'RA1',
    descripcion: 'Test resultado de aprendizaje',
    tipo: TipoRA.GENERAL,
    carreraId: 1,
    createdAt: new Date('2025-10-13T10:00:00.000Z'),
    updatedAt: new Date('2025-10-13T10:00:00.000Z'),
  };

  const mockPaginatedResponse = {
    data: [mockRA],
    total: 15,
    page: 1,
    limit: 10,
    totalPages: 2,
    hasPrevious: false,
    hasNext: true,
  };

  // Mock guards to simulate authentication/authorization
  const mockJwtAuthGuard = {
    canActivate: jest.fn((context) => {
      const request = context.switchToHttp().getRequest();
      request.user = mockUser; // Inject mock user
      return true;
    }),
  };

  const mockRolesGuard = {
    canActivate: jest.fn(() => true),
  };

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      controllers: [ResultadosAprendizajeController],
      providers: [
        {
          provide: ResultadosAprendizajeService,
          useValue: mockResultadosAprendizajeService,
        },
        {
          provide: JwtService,
          useValue: mockJwtService,
        },
        {
          provide: AuditoriaService,
          useValue: mockAuditoriaService,
        },
      ],
    })
      .overrideGuard(JwtAuthGuard)
      .useValue(mockJwtAuthGuard)
      .overrideGuard(RolesGuard)
      .useValue(mockRolesGuard)
      .compile();

    app = moduleFixture.createNestApplication();
    app.useGlobalPipes(new ValidationPipe());
    
    resultadosAprendizajeService = moduleFixture.get<ResultadosAprendizajeService>(
      ResultadosAprendizajeService,
    );
    
    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('POST /learning-outcomes', () => {
    it('should create a new RA successfully', async () => {
      const createDto = {
        codigo: 'RA1',
        descripcion: 'Test resultado de aprendizaje general',
        tipo: TipoRA.GENERAL,
        carreraId: 1,
      };

      const expectedRA = {
        ...mockRA,
        codigo: 'RA1',
        descripcion: 'Test resultado de aprendizaje general',
      };

      mockResultadosAprendizajeService.create.mockResolvedValue(expectedRA);

      const response = await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send(createDto)
        .expect(201);

      expect(response.body).toMatchObject({
        codigo: 'RA1',
        descripcion: 'Test resultado de aprendizaje general',
        tipo: 'GENERAL',
        carreraId: 1,
      });
      expect(response.body.id).toBeDefined();
      expect(response.body.createdAt).toBeDefined();
      expect(response.body.updatedAt).toBeDefined();
      expect(mockResultadosAprendizajeService.create).toHaveBeenCalledWith(createDto, mockUser.id);
    });

    it('should create RA without codigo (auto-generated)', async () => {
      const createDto = {
        descripcion: 'Test resultado de aprendizaje sin código',
        tipo: TipoRA.GENERAL,
        carreraId: 1,
      };

      const mockRAAutoGenerated = {
        ...mockRA,
        codigo: 'RA1', // Auto-generated
        descripcion: 'Test resultado de aprendizaje sin código',
      };

      mockResultadosAprendizajeService.create.mockResolvedValue(mockRAAutoGenerated);

      const response = await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send(createDto)
        .expect(201);

      expect(response.body.codigo).toBe('RA1'); // Auto-generated
      expect(response.body.descripcion).toBe('Test resultado de aprendizaje sin código');
    });

    it('should create RAE code for ESPECIFICO type', async () => {
      const createDto = {
        descripcion: 'Test resultado específico',
        tipo: TipoRA.ESPECIFICO,
        carreraId: 1,
      };

      const mockRAEspecifico = {
        ...mockRA,
        codigo: 'RAE1',
        tipo: TipoRA.ESPECIFICO,
      };

      mockResultadosAprendizajeService.create.mockResolvedValue(mockRAEspecifico);

      const response = await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send(createDto)
        .expect(201);

      expect(response.body.codigo).toBe('RAE1');
      expect(response.body.tipo).toBe('ESPECIFICO');
    });

    it('should return 400 for invalid data', async () => {
      const invalidDto = {
        codigo: '', // Empty code not allowed when provided
        descripcion: 'Test',
        tipo: 'INVALID_TYPE',
        carreraId: 1,
      };

      await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send(invalidDto)
        .expect(400);
    });

    it('should return 400 for missing required fields', async () => {
      const invalidDto = {
        codigo: 'RA1',
        // Missing descripcion
        tipo: TipoRA.GENERAL,
        carreraId: 1,
      };

      await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send(invalidDto)
        .expect(400);
    });
  });

  describe('GET /learning-outcomes', () => {
    beforeEach(() => {
      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue(
        mockPaginatedResponse,
      );
    });

    it('should get all RAs with default pagination', async () => {
      const response = await request(app.getHttpServer())
        .get('/learning-outcomes')
        .expect(200);

      expect(response.body).toEqual({
        data: [
          {
            id: mockRA.id,
            codigo: mockRA.codigo,
            descripcion: mockRA.descripcion,
            tipo: mockRA.tipo,
            carreraId: mockRA.carreraId,
            createdAt: mockRA.createdAt.toISOString(),
            updatedAt: mockRA.updatedAt.toISOString(),
          },
        ],
        total: 15,
        page: 1,
        limit: 10,
        totalPages: 2,
        hasPrevious: false,
        hasNext: true,
      });
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({});
    });

    it('should filter RAs by tipo GENERAL (HU7764)', async () => {
      const generalRAResponse = {
        ...mockPaginatedResponse,
        data: [mockRA],
        total: 2,
      };

      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue(
        generalRAResponse,
      );

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?tipo=GENERAL')
        .expect(200);

      expect(response.body.data[0].tipo).toBe('GENERAL');
      expect(response.body.total).toBe(2);
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        tipo: 'GENERAL',
      });
    });

    it('should filter RAs by tipo ESPECIFICO (HU7751)', async () => {
      const mockRAEspecifico = {
        ...mockRA,
        codigo: 'RAE1',
        tipo: TipoRA.ESPECIFICO,
      };

      const especificoRAResponse = {
        ...mockPaginatedResponse,
        data: [mockRAEspecifico],
        total: 2,
      };

      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue(
        especificoRAResponse,
      );

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?tipo=ESPECIFICO')
        .expect(200);

      expect(response.body.data[0].tipo).toBe('ESPECIFICO');
      expect(response.body.data[0].codigo).toBe('RAE1');
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        tipo: 'ESPECIFICO',
      });
    });

    it('should filter RAs by codigo (HU7759)', async () => {
      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue({
        ...mockPaginatedResponse,
        data: [mockRA],
        total: 1,
        totalPages: 1,
        hasNext: false,
      });

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?codigo=RA1')
        .expect(200);

      expect(response.body.total).toBe(1);
      expect(response.body.hasNext).toBe(false);
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        codigo: 'RA1',
      });
    });

    it('should filter RAs by descripcion (HU7759)', async () => {
      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?descripcion=herramientas')
        .expect(200);

      expect(response.body).toBeDefined();
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        descripcion: 'herramientas',
      });
    });

    it('should search RAs using general search parameter', async () => {
      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue({
        ...mockPaginatedResponse,
        total: 3,
        totalPages: 1,
        hasNext: false,
      });

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?search=desarrollo')
        .expect(200);

      expect(response.body.total).toBe(3);
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        search: 'desarrollo',
      });
    });

    it('should paginate RAs correctly (HU7770)', async () => {
      const page2Response = {
        data: [mockRA],
        total: 12,
        page: 2,
        limit: 5,
        totalPages: 3,
        hasPrevious: true,
        hasNext: true,
      };

      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue(
        page2Response,
      );

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?page=2&limit=5')
        .expect(200);

      expect(response.body.page).toBe(2);
      expect(response.body.limit).toBe(5);
      expect(response.body.hasPrevious).toBe(true);
      expect(response.body.hasNext).toBe(true);
      expect(response.body.totalPages).toBe(3);
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        page: '2', // Query params are strings
        limit: '5',
      });
    });

    it('should combine filters and pagination', async () => {
      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue({
        data: [mockRA],
        total: 2,
        page: 1,
        limit: 20,
        totalPages: 1,
        hasPrevious: false,
        hasNext: false,
      });

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?codigo=RA&tipo=GENERAL&descripcion=herramientas&carreraId=1&page=1&limit=20')
        .expect(200);

      expect(response.body.total).toBe(2);
      expect(response.body.limit).toBe(20);
      expect(mockResultadosAprendizajeService.findAllWithFiltersAndPagination).toHaveBeenCalledWith({
        codigo: 'RA',
        tipo: 'GENERAL',
        descripcion: 'herramientas',
        carreraId: '1',
        page: '1',
        limit: '20',
      });
    });

    it('should handle empty results', async () => {
      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockResolvedValue({
        data: [],
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0,
        hasPrevious: false,
        hasNext: false,
      });

      const response = await request(app.getHttpServer())
        .get('/learning-outcomes?codigo=NONEXISTENT')
        .expect(200);

      expect(response.body.data).toEqual([]);
      expect(response.body.total).toBe(0);
    });

    it('should validate pagination parameters', async () => {
      // Invalid page (less than 1)
      await request(app.getHttpServer())
        .get('/learning-outcomes?page=0')
        .expect(400);

      // Invalid limit (greater than 100)
      await request(app.getHttpServer())
        .get('/learning-outcomes?limit=101')
        .expect(400);
    });

    it('should include all required fields in response', async () => {
      const response = await request(app.getHttpServer())
        .get('/learning-outcomes')
        .expect(200);

      const firstRA = response.body.data[0];
      expect(firstRA).toHaveProperty('id');
      expect(firstRA).toHaveProperty('codigo');
      expect(firstRA).toHaveProperty('descripcion');
      expect(firstRA).toHaveProperty('tipo');
      expect(firstRA).toHaveProperty('carreraId');
      expect(firstRA).toHaveProperty('createdAt');
      expect(firstRA).toHaveProperty('updatedAt');
    });
  });

  describe('Authentication and Authorization', () => {
    it('should call JWT auth guard for POST', async () => {
      mockResultadosAprendizajeService.create.mockResolvedValue(mockRA);

      await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send({
          descripcion: 'Test',
          tipo: TipoRA.GENERAL,
          carreraId: 1,
        })
        .expect(201);

      expect(mockJwtAuthGuard.canActivate).toHaveBeenCalled();
      expect(mockRolesGuard.canActivate).toHaveBeenCalled();
    });

    it('should call JWT auth guard for GET', async () => {
      await request(app.getHttpServer())
        .get('/learning-outcomes')
        .expect(200);

      expect(mockJwtAuthGuard.canActivate).toHaveBeenCalled();
      expect(mockRolesGuard.canActivate).toHaveBeenCalled();
    });

    it('should inject user from JWT guard', async () => {
      mockResultadosAprendizajeService.create.mockResolvedValue(mockRA);

      await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send({
          descripcion: 'Test with user',
          tipo: TipoRA.GENERAL,
          carreraId: 1,
        })
        .expect(201);

      // Verify that the service was called with the user ID from the mocked guard
      expect(mockResultadosAprendizajeService.create).toHaveBeenCalledWith(
        expect.any(Object),
        mockUser.id,
      );
    });
  });

  describe('Service Integration', () => {
    it('should handle service errors gracefully', async () => {
      mockResultadosAprendizajeService.create.mockRejectedValue(new Error('Service error'));

      await request(app.getHttpServer())
        .post('/learning-outcomes')
        .send({
          descripcion: 'Test error handling',
          tipo: TipoRA.GENERAL,
          carreraId: 1,
        })
        .expect(500);
    });

    it('should handle service errors in findAll', async () => {
      mockResultadosAprendizajeService.findAllWithFiltersAndPagination.mockRejectedValue(
        new Error('Database error'),
      );

      await request(app.getHttpServer())
        .get('/learning-outcomes')
        .expect(500);
    });
  });
});